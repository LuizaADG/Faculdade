{\rtf1\ansi
{\fonttbl\f0\fnil\fcharset0 .SFUIText;}
{\colortbl;\red255\green255\blue255;}
\f0\fs32 \cf0 \cb1 \ql\ri8640
/*  Laboratorio de Arquitetura de Computadores\
 *   \
 *  Relatorio 6 - ULA\
 *  \
 *  Bruno Luiz\
 */\
\
#define N_BIT 4 // No de bits das entradas\
\
#define LED_0 13 // pinos em que estao ligados os LEDs\
#define LED_1 12\
#define LED_2 11\
#define LED_3 10\
\
// hexas de entrada recebidos pelo programa em java\
\
char Ai;\
char Bi;\
char Opi;\
\
// valores em bit das entradas e saida\
\
bool A[N_BIT];\
bool B[N_BIT];\
bool S[N_BIT];\
\
void setup() \{\
  Serial.begin(9600);\
  \
  pinMode(LED_0, OUTPUT);\
  pinMode(LED_1, OUTPUT);\
  pinMode(LED_2, OUTPUT);\
  pinMode(LED_3, OUTPUT);\
\}\
\
void loop() \{\
\
  if (Serial.available() > 0) \{\
    \
    Ai = Serial.read();\
    delay(10);\
    Bi = Serial.read();\
    delay(10);\
    Opi = Serial.read();\
    delay(10);\
\
    if(Serial.read() == '\\n') \{\
      \
      Serial.print(Ai);\
      Serial.print(Bi);\
      Serial.println(Opi);\
      \
      /*\
      apagaLED();\
      delay(250);\
      piscaLED();\
      delay(250);\
      */\
\
      byte auxA = hex2dec(Ai);\
      byte auxB = hex2dec(Bi);\
    \
      dec2bin(auxA, A);\
      dec2bin(auxB, B);\
      \
      MUX(Ai, Bi, Opi);\
    \
      ascLED();\
    \}\
  \}\
\}\
\
byte hex2dec(char c) \{\
  // converte os valores hexa da entrada em decimal\
  \
  byte aux = c;\
  if(aux >= 65) aux = aux - 55;\
\
  return aux;\
\}\
\
void dec2bin(byte dec, bool bin[]) \{\
  // converte valores em decimal para binario (col de bool)\
  \
  for(byte i = 0; i < N_BIT; i++) \{\
    bin[i] = dec % 2;\
    dec = dec / 2;\
  \}\
\}\
\
void ascLED() \{\
  // ascende os leds com o resultado da ULA\
  \
  digitalWrite(LED_0, S[0]);\
  digitalWrite(LED_1, S[1]);\
  digitalWrite(LED_2, S[2]);\
  digitalWrite(LED_3, S[3]);\
\}\
\
void MUX(byte ain, byte bin, char Op) \{\
  // direciona a saida de acordo com a selecao\
\
  switch(Op) \{\
    case '0': \{\
      // zeroL\
      \
      dec2bin(0, S);\
      break;\
    \}\
    case '1': \{\
      // umL\
      \
      dec2bin(pow(2, N_BIT) - 1, S);\
      break;\
    \}\
    case '2': \{\
      // An\
      \
      n(A, S);\
      break;\
    \}\
    case '3': \{\
      // Bn\
      \
      n(B, S);\
      break;\
    \}\
    case '4': \{\
      // AouB\
      \
      OR(A, B, S);\
      break;\
    \}\
    case '5': \{\
      // AeB\
      \
      AND(A, B, S);\
      break;\
    \}\
    case '6': \{\
      // AxorB\
\
      XOR(A, B, S);\
      break;\
    \}\
    case '7': \{\
      // AnandB\
\
      bool AeB[N_BIT];\
      \
      AND(A, B, AeB);\
      n(AeB,S);\
      break;\
    \}\
    case '8': \{\
      // AnorB\
\
      bool AorB[N_BIT];\
      \
      OR(A, B, AorB);\
      n(AorB, S);\
      break;\
    \}\
    case '9': \{\
      // AxnorB\
\
      bool AxorB[N_BIT];\
      \
      XOR(A, B, AxorB);\
      n(AxorB, S);\
      break;\
    \}\
    case 'A': \{\
      // AnouB\
\
      bool An[N_BIT];\
      \
      n(A, An); // A'\
      OR(An, B, S);\
      break;\
    \}\
    case 'B': \{\
      // AouBn\
\
      bool Bn[N_BIT];\
      \
      n(B, Bn); // B'\
      OR(A, Bn, S);\
      break;\
    \}\
    case 'C': \{\
      // AneB\
\
      bool An[N_BIT];\
      \
      n(A, An); // A'\
      AND(An, B, S);\
      break;\
    \}\
    case 'D': \{\
      // AeBn\
\
      bool Bn[N_BIT];\
      \
      n(B, Bn); // B'\
      AND(A, Bn, S);\
      break;\
    \}\
    case 'E': \{\
      // AnouBn\
\
      bool An[N_BIT];\
      bool Bn[N_BIT];\
\
      n(A, An);\
      n(B, Bn);\
      OR(An, Bn, S);\
      break;\
    \}\
    case 'F': \{\
      // AneBn\
      \
      bool An[N_BIT];\
      bool Bn[N_BIT];\
\
      n(A, An);\
      n(B, Bn);\
      AND(An, Bn, S);\
      break;\
    \}\
  \}\
\}\
\
void XOR(bool a[], bool b[], bool s[]) \{\
  // XOR dos binarios enviados\
\
  for(int i = 0; i < N_BIT; i++) \{\
    s[i] = a[i] ^ b[i];\
  \}\
\}\
\
void AND(bool a[], bool b[], bool s[]) \{\
  // AND dos binarios enviados\
\
  for(int i = 0; i < N_BIT; i++) \{\
    s[i] = a[i] & b[i];\
  \}\
\}\
void OR(bool a[], bool b[], bool s[]) \{\
  // OR dos binarios enviados\
\
  for(int i = 0; i < N_BIT; i++) \{\
    s[i] = a[i] | b[i];\
  \}\
\}\
\
void n(bool bin[], bool aux[]) \{\
  // NOT do binario enviado\
  \
  for(int i = 0; i < N_BIT; i++) \{\
    aux[i] = ! bin[i];\
  \}\
\}\
\
/*\
void cpOut(bool cp[]) \{\
  // escreve um valor na saida\
  \
  for(int i = 0; i < N_BIT; i++) \{\
    S[i] = cp[i];\
  \}\
\}\
\
void apagaLED() \{\
  // apaga os LEDs\
  \
  digitalWrite(LED_0, 0);\
  digitalWrite(LED_1, 0);\
  digitalWrite(LED_2, 0);\
  digitalWrite(LED_3, 0);\
\}\
\
void piscaLED() \{\
  // pisca os LEDs\
  \
  digitalWrite(LED_0, 1);\
  delay(100);\
  digitalWrite(LED_1, 1);\
  delay(100);\
  digitalWrite(LED_2, 1);\
  delay(100);\
  digitalWrite(LED_3, 1);\
  delay(100);\
  digitalWrite(LED_0, 0);\
  delay(100);\
  digitalWrite(LED_1, 0);\
  delay(100);\
  digitalWrite(LED_2, 0);\
  delay(100);\
  digitalWrite(LED_3, 0);\
\}\
*/\
}